{
  "config": {
    "configFile": "C:\\Users\\Vijay\\Playwright\\Playwright_Typescript\\playwright.config.ts",
    "rootDir": "C:/Users/Vijay/Playwright/Playwright_Typescript",
    "forbidOnly": false,
    "fullyParallel": false,
    "globalSetup": null,
    "globalTeardown": null,
    "globalTimeout": 0,
    "grep": {},
    "grepInvert": null,
    "maxFailures": 0,
    "metadata": {
      "actualWorkers": 1
    },
    "preserveOutput": "always",
    "reporter": [
      [
        "dot",
        null
      ],
      [
        "json",
        {
          "outputFile": "jsonReports/jsonReport.json"
        }
      ],
      [
        "html",
        {
          "open": "never"
        }
      ]
    ],
    "reportSlowTests": {
      "max": 5,
      "threshold": 15000
    },
    "quiet": false,
    "projects": [
      {
        "outputDir": "C:/Users/Vijay/Playwright/Playwright_Typescript/test-results",
        "repeatEach": 1,
        "retries": 0,
        "id": "chrome",
        "name": "chrome",
        "testDir": "C:/Users/Vijay/Playwright/Playwright_Typescript",
        "testIgnore": [],
        "testMatch": [
          "tests/applitoolTest.spec.ts"
        ],
        "timeout": 300000
      }
    ],
    "shard": null,
    "updateSnapshots": "missing",
    "version": "1.38.1",
    "workers": 4,
    "webServer": null
  },
  "suites": [
    {
      "title": "tests\\applitoolTest.spec.ts",
      "file": "tests/applitoolTest.spec.ts",
      "column": 0,
      "line": 0,
      "specs": [],
      "suites": [
        {
          "title": "ACME Bank",
          "file": "tests/applitoolTest.spec.ts",
          "line": 70,
          "column": 6,
          "specs": [
            {
              "title": "handling dropdown using applitool",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 300000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chrome",
                  "projectName": "chrome",
                  "results": [
                    {
                      "workerIndex": 0,
                      "status": "passed",
                      "duration": 23984,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2023-10-10T08:34:13.734Z",
                      "attachments": [
                        {
                          "name": "video",
                          "contentType": "video/webm",
                          "path": "C:\\Users\\Vijay\\Playwright\\Playwright_Typescript\\test-results\\tests-applitoolTest-ACME-Bank-handling-dropdown-using-applitool-chrome\\video.webm"
                        },
                        {
                          "name": "screenshot",
                          "contentType": "image/png",
                          "path": "C:\\Users\\Vijay\\Playwright\\Playwright_Typescript\\test-results\\tests-applitoolTest-ACME-Bank-handling-dropdown-using-applitool-chrome\\test-finished-1.png"
                        }
                      ]
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "60a6a0f6be370252ba86-932ad4a3684aa445839c",
              "file": "tests/applitoolTest.spec.ts",
              "line": 84,
              "column": 9
            },
            {
              "title": "Bootstrap dropdown using applitool",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 300000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chrome",
                  "projectName": "chrome",
                  "results": [
                    {
                      "workerIndex": 0,
                      "status": "passed",
                      "duration": 17867,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "Visual test results TestResultsSummaryData {\n  _summary: {\n    results: [ \u001b[36m[Object]\u001b[39m, \u001b[36m[Object]\u001b[39m ],\n    passed: \u001b[33m2\u001b[39m,\n    unresolved: \u001b[33m0\u001b[39m,\n    failed: \u001b[33m0\u001b[39m,\n    exceptions: \u001b[33m0\u001b[39m,\n    mismatches: \u001b[33m0\u001b[39m,\n    missing: \u001b[33m0\u001b[39m,\n    matches: \u001b[33m0\u001b[39m\n  },\n  _core: {\n    openEyes: \u001b[36m[AsyncFunction: openEyes]\u001b[39m,\n    openFunctionalSession: \u001b[36m[AsyncFunction: openFunctionalSession]\u001b[39m,\n    locate: \u001b[36m[AsyncFunction: locate]\u001b[39m,\n    locateText: \u001b[36m[AsyncFunction: locateText]\u001b[39m,\n    extractText: \u001b[36m[AsyncFunction: extractText]\u001b[39m,\n    closeBatch: \u001b[36m[AsyncFunction: closeBatch]\u001b[39m,\n    deleteTest: \u001b[36m[AsyncFunction: deleteTest]\u001b[39m,\n    getAccountInfo: \u001b[36m[AsyncFunction: getAccountInfo]\u001b[39m,\n    logEvent: \u001b[36m[AsyncFunction: logEvent]\u001b[39m,\n    base: {\n      openEyes: \u001b[36m[AsyncFunction: openEyes]\u001b[39m,\n      openFunctionalSession: \u001b[36m[AsyncFunction: openFunctionalSession]\u001b[39m,\n      locate: \u001b[36m[AsyncFunction: locate]\u001b[39m,\n      locateText: \u001b[36m[AsyncFunction: locateText]\u001b[39m,\n      extractText: \u001b[36m[AsyncFunction: extractText]\u001b[39m,\n      closeBatch: \u001b[36m[AsyncFunction: closeBatch]\u001b[39m,\n      deleteTest: \u001b[36m[AsyncFunction: deleteTest]\u001b[39m,\n      getAccountInfo: \u001b[36m[Function]\u001b[39m,\n      logEvent: \u001b[36m[AsyncFunction: logEvent]\u001b[39m\n    },\n    getViewportSize: \u001b[36m[AsyncFunction: getViewportSize]\u001b[39m,\n    setViewportSize: \u001b[36m[AsyncFunction: setViewportSize]\u001b[39m,\n    getNMLClient: [Function: funcWithCache] {\n      clearCache: \u001b[36m[Function (anonymous)]\u001b[39m,\n      getCachedValues: \u001b[36m[Function (anonymous)]\u001b[39m,\n      setCachedValue: \u001b[36m[Function (anonymous)]\u001b[39m\n    },\n    getECClient: [Function: funcWithCache] {\n      clearCache: \u001b[36m[Function (anonymous)]\u001b[39m,\n      getCachedValues: \u001b[36m[Function (anonymous)]\u001b[39m,\n      setCachedValue: \u001b[36m[Function (anonymous)]\u001b[39m\n    },\n    makeManager: \u001b[36m[AsyncFunction: makeManager]\u001b[39m\n  }\n}\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2023-10-10T08:34:38.439Z",
                      "attachments": [
                        {
                          "name": "video",
                          "contentType": "video/webm",
                          "path": "C:\\Users\\Vijay\\Playwright\\Playwright_Typescript\\test-results\\tests-applitoolTest-ACME-Bank-Bootstrap-dropdown-using-applitool-chrome\\video.webm"
                        },
                        {
                          "name": "screenshot",
                          "contentType": "image/png",
                          "path": "C:\\Users\\Vijay\\Playwright\\Playwright_Typescript\\test-results\\tests-applitoolTest-ACME-Bank-Bootstrap-dropdown-using-applitool-chrome\\test-finished-1.png"
                        }
                      ]
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "60a6a0f6be370252ba86-043ce219d86299cbbc9b",
              "file": "tests/applitoolTest.spec.ts",
              "line": 106,
              "column": 9
            }
          ]
        }
      ]
    }
  ],
  "errors": []
}